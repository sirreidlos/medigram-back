openapi: 3.0.3
info:
  title: Medigram API
  version: 0.2.0
  description: >
    Medigram API documentation. Check the different authorization methods to see
    which route requires what.
    
    The following header is always used for authenticated routes:
    
    `Authorization: Bearer <SESSION_ID>`

servers:
  - url: https://medigram-354o.shuttle.app/
  - url: http://localhost:8000/

tags:
  - name: auth
    description: everything related to user authentication and authorization
  - name: user
    description: user profile and information
  - name: allergies
    description: user allergy management
  - name: measurements
    description: user body measurements
  - name: medical-conditions
    description: user medical conditions management
  - name: purchases
    description: user purchase history
  - name: doctors
    description: doctor profiles and information
  - name: consultations
    description: medical consultations and related data
  - name: prescriptions
    description: user prescriptions management

paths:
  # =================== AUTH ===================
  /register:
    post:
      tags:
        - auth
      summary: Register a new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [email, password]
              properties:
                email:
                  type: string
                password:
                  type: string
      responses:
        '201':
          description: Registration successful
          content:
            application/json:
              example:
                message: registration successful
        '409':
          description: Duplicate email
          content:
            application/json:
              example:
                error: Email has been registered previously

  /login:
    post:
      tags:
        - auth
      summary: Log in and retrieve session information
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [email, password]
              properties:
                email:
                  type: string
                  example: "alice@example.com"
                password:
                  type: string
                  example: "test"
      responses:
        '200':
          description: Successful login
          content:
            application/json:
              example:
                user_id: 41676bb2-8561-47fe-9271-4c7e89defa7c
                session_id: xgsY0ovfKCqpfLHfCZCSaI0AVHt2e6Xnv76VyvXsyJVsKsu89UjdDEWIU9k7IGmc
                token_type: Bearer
                device_id: 19553e8e-b9bb-4af6-b73a-448e01103125
                private_key: y0eJbsKqY7so2gNwAQ0M0ZlM0... [PRIVATE KEY IN BASE64 STRING]
        '404':
          description: User not found
          content:
            application/json:
              example:
                error: User not found

  /logout:
    post:
      tags:
        - auth
      summary: üîí Logout user
      security:
        - SessionAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              required: [device_id]
              type: object
              properties:
                device_id:
                  type: string
      responses:
        '200':
          description: Logout successful
          content:
            application/json:
              example:
                message: logged out

  /request-nonce:
    get:
      tags:
        - auth
      summary: Request a nonce for consultation consent
      responses:
        '200':
          description: Nonce generated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NonceResponse'

  # =================== USER INFORMATION ===================
  /me:
    get:
      tags:
        - user
      summary: üîí Get own info
      security:
        - SessionAuth: []
      responses:
        '200':
          description: User info
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'

  /me/details:
    get:
      tags:
        - user
      summary: üîí Get own details
      security:
        - SessionAuth: []
      responses:
        '200':
          description: User details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDetails'
        '404':
          description: User details not found
          content:
            application/json:
              example:
                error: Row does not exist in the database

    put:
      tags:
        - user
      summary: üîí Update own details
      security:
        - SessionAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [nik, name, dob, gender]
              properties:
                nik:
                  type: string
                  format: digit16
                  pattern: '^\d{16}$'
                  example: 1000000000000000
                  description: |
                    This is actually an integer of 16 digits. Always pass it as
                    an integer, as passing it as a string would not work.
                    If it's 16 digits of 9s, JavaScript will (most likely)
                    render it as 100_000_000_000_000_000, so be aware
                name:
                  type: string
                  example: Alice
                dob:
                  type: string
                  format: date
                  example: 1970-01-01
                gender:
                  type: string
                  enum: [M, F]
                  example: F
      responses:
        '201':
          description: Details updated
          content:
            application/json:
              example:
                message: Successfully set user detail

  /users/{user_id}:
    get:
      tags:
        - user
      summary: üîí Get user info
      security:
        - SessionAuth: []
        - PractitionerAuth: []
      parameters:
        - name: user_id
          in: path
          description: User ID
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: User info
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'

  /users/{user_id}/details:
    get:
      tags:
        - user
      summary: üîí Get user details
      security:
        - SessionAuth: []
        - PractitionerAuth: []
      parameters:
        - name: user_id
          in: path
          description: User ID
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: User details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDetails'
        '404':
          description: User details not found
          content:
            application/json:
              example:
                error: Row does not exist in the database

  # =================== ALLERGIES ===================
  /me/allergies:
    get:
      tags:
        - allergies
      summary: üîí Get own allergies
      security:
        - SessionAuth: []
      responses:
        '200':
          description: List of user's allergies
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Allergy'

    post:
      tags:
        - allergies
      summary: üîí Add a new allergy
      security:
        - SessionAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [allergen, severity]
              properties:
                allergen:
                  type: string
                  example: beans
                severity:
                  type: string
                  enum: [MILD, MODERATE, SEVERE]
                  example: MODERATE
      responses:
        '201':
          description: Allergy added successfully
          content:
            application/json:
              example:
                message: allergy added

  /me/allergies/{allergy_id}:
    delete:
      tags:
        - allergies
      summary: üîí Remove an allergy
      security:
        - SessionAuth: []
      parameters:
        - name: allergy_id
          in: path
          description: Allergy ID
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Allergy removed successfully
          content:
            application/json:
              example:
                message: allergy removed
        '404':
          description: Allergy not found
          content:
            application/json:
              example:
                error: Row does not exist in the database

  /users/{user_id}/allergies:
    get:
      tags:
        - allergies
      summary: üîí/‚öïÔ∏è Get user allergies
      security:
        - SessionAuth: []
        - PractitionerAuth: []
      parameters:
        - name: user_id
          in: path
          description: User ID
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: List of user's allergies
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Allergy'

  # =================== MEASUREMENTS ===================
  /me/measurements:
    get:
      tags:
        - measurements
      summary: üîí Get own measurements
      security:
        - SessionAuth: []
      responses:
        '200':
          description: List of user's measurements
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Measurement'

    post:
      tags:
        - measurements
      summary: üîí Add a new measurement
      security:
        - SessionAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [height_in_cm, weight_in_kg]
              properties:
                height_in_cm:
                  type: number
                  format: float
                  example: 172.32
                weight_in_kg:
                  type: number
                  format: float
                  example: 52.00
                measured_at:
                  type: string
                  format: date-time
                  description: ISO 8601 format timestamp
                  example: 2025-03-08T20:11:16Z
      responses:
        '201':
          description: Measurement added successfully
          content:
            application/json:
              example:
                message: Successfully added user measurement

  /users/{user_id}/measurements:
    get:
      tags:
        - measurements
      summary: üîí/‚öïÔ∏è Get user measurements
      security:
        - SessionAuth: []
        - PractitionerAuth: []
      parameters:
        - name: user_id
          in: path
          description: User ID
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: List of user's measurements
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Measurement'

  # =================== MEDICAL CONDITIONS ===================
  /me/medical-conditions:
    get:
      tags:
        - medical-conditions
      summary: üîí Get own medical conditions
      security:
        - SessionAuth: []
      responses:
        '200':
          description: List of user's medical conditions
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/MedicalCondition'

    post:
      tags:
        - medical-conditions
      summary: üîí Add a new medical condition
      security:
        - SessionAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [condition, severity]
              properties:
                condition:
                  type: string
                  example: Hypertension
                severity:
                  type: string
                  enum: [MILD, MODERATE, SEVERE]
                  example: MODERATE
                diagnosed_at:
                  type: string
                  format: date
                  example: 2024-01-15
      responses:
        '201':
          description: Medical condition added successfully
          content:
            application/json:
              example:
                message: medical condition added

  /me/medical-conditions/{condition_id}:
    delete:
      tags:
        - medical-conditions
      summary: üîí Remove a medical condition
      security:
        - SessionAuth: []
      parameters:
        - name: condition_id
          in: path
          description: Medical condition ID
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Medical condition removed successfully
          content:
            application/json:
              example:
                message: medical condition removed
        '404':
          description: Medical condition not found
          content:
            application/json:
              example:
                error: Row does not exist in the database

  /users/{user_id}/medical-conditions:
    get:
      tags:
        - medical-conditions
      summary: üîí/‚öïÔ∏è Get user medical conditions
      security:
        - SessionAuth: []
        - PractitionerAuth: []
      parameters:
        - name: user_id
          in: path
          description: User ID
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: List of user's medical conditions
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/MedicalCondition'

  # =================== PURCHASES ===================
  /me/purchases:
    get:
      tags:
        - purchases
      summary: üîí Get own purchases
      security:
        - SessionAuth: []
      responses:
        '200':
          description: List of user's purchases
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Purchase'

    post:
      tags:
        - purchases
      summary: üîí Add a new purchase
      security:
        - SessionAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [item_name, amount, purchase_date]
              properties:
                item_name:
                  type: string
                  example: Paracetamol 500mg
                amount:
                  type: number
                  format: float
                  example: 25000.00
                purchase_date:
                  type: string
                  format: date
                  example: 2025-03-08
                pharmacy_name:
                  type: string
                  example: Kimia Farma
      responses:
        '201':
          description: Purchase added successfully
          content:
            application/json:
              example:
                message: purchase added

  # =================== DOCTORS ===================
  /doctors/{doctor_id}/profile:
    get:
      tags:
        - doctors
      summary: üîí Get doctor profile
      security:
        - SessionAuth: []
      parameters:
        - name: doctor_id
          in: path
          description: Doctor ID
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Doctor profile information
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DoctorProfile'
        '404':
          description: Doctor not found
          content:
            application/json:
              example:
                error: Row does not exist in the database

  /users/{user_id}/doctor-profile:
    get:
      tags:
        - doctors
      summary: üîí Get doctor profile by user ID
      security:
        - SessionAuth: []
      parameters:
        - name: user_id
          in: path
          description: User ID
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Doctor profile information
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DoctorProfile'
        '404':
          description: Doctor profile not found
          content:
            application/json:
              example:
                error: Row does not exist in the database

  /me/doctor-profile:
    post:
      tags:
        - doctors
      summary: üîí Create a doctor profile
      security:
        - SessionAuth: []
      responses:
        '201':
          description: Doctor profile created
          content:
            application/json:
              example:
                message: Successfully created a temporary profile
        '409':
          description: Doctor profile created previously
          content:
            application/json:
              example:
                message: foreign key violation


  /doctor/practice-location:
    post:
      tags:
        - doctors
      summary: üîí Add a practice address
      security:
        - PractitionerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - practice_permit
                - practice_address
              properties:
                practice_permit:
                  type: string
                  description: Permit/license number authorizing practice at the address
                  example: "420/SIP-001/Dinkes/I/2025"
                practice_address:
                  type: string
                  description: The physical address where the doctor practices
                  example: "Jl. Raya Kb. Jeruk No.27, RT.1/RW.9, Kemanggisan, Kec. Palmerah, Kota Jakarta Barat, Daerah Khusus Ibukota Jakarta 11530"
      responses:
        '201':
          description: Location added
          content:
            application/json:
              example:
                message: Successfully submitted a practice address
        '401':
          description: Unauthorized - not a licensed practitioner
          content:
            application/json:
              example:
                message: Not licensed  

  # =================== CONSULTATIONS ===================
  /me/consultations:
    get:
      tags:
        - consultations
      summary: üîí Get own consultations
      security:
        - SessionAuth: []
      responses:
        '200':
          description: List of user's own consultations
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Consultation'

  /me/consultations/{consultation_id}:
    get:
      tags:
        - consultations
      summary: üîí Get single consultation details
      security:
        - SessionAuth: []
      parameters:
        - name: consultation_id
          in: path
          description: Consultation ID
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Single consultation details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Consultation'
        '404':
          description: Consultation not found
          content:
            application/json:
              example:
                error: Row does not exist in the database

  /users/{user_id}/consultations:
    get:
      tags:
        - consultations
      summary: üîí/‚öïÔ∏è Get user consultations
      security:
        - SessionAuth: []
        - PractitionerAuth: []
      parameters:
        - name: user_id
          in: path
          description: User ID
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: List of user's consultations
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Consultation'

    post:
      tags:
        - consultations
      summary: ‚öïÔ∏è Create a new consultation (Doctor only)
      security:
        - PractitionerAuth: []
      parameters:
        - name: user_id
          in: path
          description: User ID
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateConsultationRequest'
      responses:
        '201':
          description: Consultation record added successfully
          content:
            application/json:
              example:
                message: consultation record added

  /doctor/consultations:
    get:
      tags:
        - consultations
      summary: ‚öïÔ∏è Get own consultations as doctor
      security:
        - PractitionerAuth: []
      responses:
        '200':
          description: List of consultations where user is the doctor
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Consultation'

  /doctors/{doctor_id}/users/{user_id}/consultations:
    get:
      tags:
        - consultations
      summary: ‚öïÔ∏è Get consultations between specific doctor and user
      security:
        - PractitionerAuth: []
      parameters:
        - name: doctor_id
          in: path
          description: Doctor ID
          required: true
          schema:
            type: string
            format: uuid
        - name: user_id
          in: path
          description: User ID
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: List of consultations between the doctor and user
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Consultation'

  /consultations/{consultation_id}/diagnoses:
    get:
      tags:
        - consultations
      summary: üîí/‚öïÔ∏è Get diagnoses for a consultation
      security:
        - SessionAuth: []
        - PractitionerAuth: []
      parameters:
        - name: consultation_id
          in: path
          description: Consultation ID
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: List of diagnoses for the consultation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Diagnosis'
        '403':
          description: Access forbidden
          content:
            application/json:
              example:
                error: You are not allowed to request for this

  /consultations/{consultation_id}/prescriptions:
    get:
      tags:
        - consultations
      summary: üîí/‚öïÔ∏è Get prescriptions for a consultation
      security:
        - SessionAuth: []
        - PractitionerAuth: []
      parameters:
        - name: consultation_id
          in: path
          description: Consultation ID
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: List of prescriptions for the consultation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Prescription'

  /prescriptions/{prescription_id}/purchase:
    patch:
      tags:
        - prescriptions
      summary: üîí Mark prescription as purchased
      description: Updates the `purchased_at` field for a prescription to indicate it has been purchased.
      security:
        - SessionAuth: []
      parameters:
        - name: prescription_id
          in: path
          required: true
          description: UUID of the prescription
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [purchased_at]
              properties:
                purchased_at:
                  type: string
                  format: date-time
                  example: "2025-05-30T15:04:05Z"
      responses:
        '200':
          description: Prescription marked as purchased
          content:
            application/json:
              example:
                message: Prescription marked as purchased
        '403':
          description: Authenticated user is not the owner of the prescription
          content:
            application/json:
              example:
                error: Not the same user
        '404':
          description: Prescription not found
          content:
            application/json:
              example:
                error: Row does not exist in the database

  /consultations/{consultation_id}/reminder:
    put:
      tags:
        - consultations
      summary: üîí Set reminder for consultation
      security:
        - SessionAuth: []
      parameters:
        - name: consultation_id
          in: path
          description: Consultation ID
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [reminder_date, reminder_message]
              properties:
                reminder_date:
                  type: string
                  format: date-time
                  example: 2025-04-01T10:00:00Z
                reminder_message:
                  type: string
                  example: Take your medication
      responses:
        '200':
          description: Reminder set successfully
          content:
            application/json:
              example:
                message: reminder set

components:
  securitySchemes:
    SessionAuth:
      type: http
      scheme: bearer
      bearerFormat: session-id
      description: |
        Standard SESSION_ID authorization from the login
    PractitionerAuth:
      type: http
      scheme: bearer
      bearerFormat: session-id
      description: |
        SESSION_ID authorization from the login with higher privilege as a
        practitioner

  responses:
    UnauthorizedError:
      description: Session ID is missing or invalid
    NotFound:
      description: Resource not found
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: string

  schemas:
    User:
      type: object
      properties:
        user_id:
          type: string
          format: uuid
          example: d3969164-86ea-442d-a589-79de89116f9c
        email:
          type: string
          example: alice@example.com

    UserDetails:
      type: object
      properties:
        user_id:
          type: string
          format: uuid
          example: d3969164-86ea-442d-a589-79de89116f9c
        nik:
          type: string
          format: digit16
          pattern: '^\d{16}$'
          example: 1000000000000000
          description: |
            This is actually an integer of 16 digits. Always pass it as
            an integer, as passing it as a string would not work.
            If it's 16 digits of 9s, JavaScript will (most likely)
            render it as 100_000_000_000_000_000, so be aware
        name:
          type: string
          example: "Alice"
        dob:
          type: string
          format: date
          example: 1970-01-01
        gender:
          type: string
          enum: [M, F]
          example: F

    Allergy:
      type: object
      properties:
        allergy_id:
          type: string
          format: uuid
          example: f7769edf-b06b-4749-b6ff-d91efcca8403
        user_id:
          type: string
          format: uuid
          example: d3969164-86ea-442d-a589-79de89116f9c
        allergen:
          type: string
          example: pollens
        severity:
          type: string
          enum: [MILD, MODERATE, SEVERE]
          example: MILD

    Measurement:
      type: object
      properties:
        measurement_id:
          type: string
          format: uuid
          example: 893d929e-091c-47bd-8ae4-5388c761aba1
        user_id:
          type: string
          format: uuid
          example: d3969164-86ea-442d-a589-79de89116f9c
        height_in_cm:
          type: number
          format: float
          example: 126.45
        weight_in_kg:
          type: number
          format: float
          example: 63.33
        measured_at:
          type: string
          format: date-time
          example: 1970-03-01 00:00:00+00

    MedicalCondition:
      type: object
      properties:
        condition_id:
          type: string
          format: uuid
          example: 0c29c9ab-a1aa-48eb-b43f-b447d70b6428
        user_id:
          type: string
          format: uuid
          example: d3969164-86ea-442d-a589-79de89116f9c
        condition:
          type: string
          example: Hypertension

    Purchase:
      type: object
      properties:
        purchase_id:
          type: string
          format: uuid
        user_id:
          type: string
          format: uuid
        item_name:
          type: string
        amount:
          type: number
          format: float
        purchase_date:
          type: string
          format: date
        pharmacy_name:
          type: string

    DoctorProfile:
      type: object
      properties:
        doctor_id:
          type: string
          format: uuid
        user_id:
          type: string
          format: uuid
        name:
          type: string
        created_at:
          type: string
          format: date-time
        locations:
          type: array
          items:
            $ref: '#/components/schemas/Location'
      example:
        doctor_id: a5ca9dee-89b4-4228-aff5-506b995f3b42
        user_id: d3969164-86ea-442d-a589-79de89116f9c
        name: Alice
        created_at: 1970-03-01T00:00:00Z
        locations:
          - location_id: fbc0a545-f266-495d-91a1-667479a13ace
            doctor_id: a5ca9dee-89b4-4228-aff5-506b995f3b42
            practice_permit: 420/SIP-001/Dinkes/I/2025
            practice_address: Jl. Raya Kb. Jeruk No.27, RT.1/RW.9, Kemanggisan, Kec. Palmerah, Kota Jakarta Barat, Daerah Khusus Ibukota Jakarta 11530
            approved_at: 1970-03-04T00:00:00Z
            created_at: 1970-03-01T00:00:00Z

    Location:
      type: object
      properties:
        location_id:
          type: string
          format: uuid
        doctor_id:
          type: string
          format: uuid
        practice_permit:
          type: string
        practice_address:
          type: string
        approved_at:
          type: string
          format: date-time
        created_at:
          type: string
          format: date-time
      example:
        location_id: fbc0a545-f266-495d-91a1-667479a13ace
        doctor_id: a5ca9dee-89b4-4228-aff5-506b995f3b42
        practice_permit: 420/SIP-001/Dinkes/I/2025
        practice_address: Jl. Raya Kb. Jeruk No.27, RT.1/RW.9, Kemanggisan, Kec. Palmerah, Kota Jakarta Barat, Daerah Khusus Ibukota Jakarta 11530
        approved_at: 1970-03-04T00:00:00Z
        created_at: 1970-03-01T00:00:00Z

    Consultation:
      type: object
      properties:
        consultation_id:
          type: string
          format: uuid
        doctor_id:
          type: string
          format: uuid
        user_id:
          type: string
          format: uuid
        location_id:
          type: string
          format: uuid
        symptoms:
          type: string
        created_at:
          type: string
          format: date-time
        reminded:
          type: boolean
        
    Diagnosis:
      type: object
      properties:
        diagnosis_id:
          type: string
          format: uuid
        consultation_id:
          type: string
          format: uuid
        diagnosis:
          type: string
        severity:
          type: string
          enum: [MILD, MODERATE, SEVERE]
          
    Prescription:
      type: object
      properties:
        prescription_id:
          type: string
          format: uuid
        consultation_id:
          type: string
          format: uuid
        drug_name:
          type: string
        doses_in_mg:
          type: number
          format: double
        regimen_per_day:
          type: number
          format: double
        quantity_per_dose:
          type: number
          format: double
        instruction:
          type: string
        purchased_at:
          type: string
          format: date-time
          nullable: true
          
    NonceResponse:
      type: object
      properties:
        expiration_date:
          type: string
          format: date-time
        nonce:
          type: string
          
    Consent:
      type: object
      required: [signer_device_id, nonce, signature]
      properties:
        signer_device_id:
          type: string
          format: uuid
        nonce:
          type: string
        signature:
          type: string
          
    CreateConsultationRequest:
      type: object
      required: [consent, user_id, location_id, diagnoses, symptoms, prescriptions]
      properties:
        consent:
          $ref: '#/components/schemas/Consent'
        user_id:
          type: string
          format: uuid
        location_id:
          type: string
          format: uuid
        diagnoses:
          type: array
          items:
            type: object
            required: [diagnosis, severity]
            properties:
              diagnosis:
                type: string
              severity:
                type: string
                enum: [MILD, MODERATE, SEVERE]
        symptoms:
          type: string
        prescriptions:
          type: array
          items:
            type: object
            required: 
              - drug_name
              - doses_in_mg
              - regimen_per_day
              - quantity_per_dose
              - instruction
            properties:
              drug_name:
                type: string
              doses_in_mg:
                type: number
                format: double
              regimen_per_day:
                type: number
                format: double
              quantity_per_dose:
                type: number
                format: double
              instruction:
                type: string
